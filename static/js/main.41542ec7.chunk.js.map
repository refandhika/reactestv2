{"version":3,"sources":["logo.svg","Home.js","FadingText.js","TypingText.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","texts","FadingText","props","state","total","length","index","fading","this","timerID","setInterval","changeText","clearInterval","current","setState","timer","setTimeout","_","classChange","React","Component","TypingText","options","strings","typeSpeed","backSpeed","loop","backDelay","typed","Typed","el","destroy","ref","App","basename","to","src","logo","alt","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,8NCU5BC,MARf,WACE,OACE,yBAAKC,UAAU,QACb,6E,uCCFAC,G,MAAQ,CACZ,QACA,QACA,QACA,MACA,SAmEaC,E,YA/Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,MAAOJ,EAAMK,OACbC,MAAO,EACPC,QAAQ,GANO,E,iFAUE,IAAD,OAClBC,KAAKC,QAAUC,aACb,kBAAM,EAAKC,eACX,O,2CAKFC,cAAcJ,KAAKC,W,mCAGP,IAAD,OACLI,EACGL,KAAKL,MAAMC,MADdS,EAEGL,KAAKL,MAAMG,MAGpBE,KAAKM,SAAS,CACjBP,QAAQ,IAGLC,KAAKO,MAAQC,YAAW,SAAAC,GACnBJ,EAAgBA,EAAgB,EACjC,EAAKC,SAAS,CACZR,MAAOO,EAAgB,IAGzB,EAAKC,SAAS,CACZR,MAAO,IAGX,EAAKQ,SAAS,CAACP,QAAQ,MACtB,O,+BAKH,IAAMD,EAAQE,KAAKL,MAAMG,MAErBY,EAAc,aAMlB,OAPeV,KAAKL,MAAMI,SAI7BW,EAAc,oBAIT,yBAAKnB,UAAU,cACb,mCAAQ,0BAAMA,UAAU,QAAO,0BAAMA,UAAWmB,GAAclB,EAAMM,KAApE,wC,GA1DiBa,IAAMC,W,iBCPzBpB,EAAQ,CACZ,QACA,QACA,QACA,MACA,QAkCaqB,E,YA9Bb,WAAYnB,GAAQ,qEACZA,I,iFAKN,IAAMoB,EAAU,CACdC,QAASvB,EACTwB,UAAW,GACXC,UAAW,GACXC,MAAM,EACNC,UAAW,KAGbnB,KAAKoB,MAAQ,IAAIC,IAAMrB,KAAKsB,GAAIR,K,6CAIhCd,KAAKoB,MAAMG,Y,+BAGH,IAAD,OACP,OACE,yBAAKhC,UAAU,cACb,mCAAQ,0BAAMA,UAAU,QAAO,0BAAMA,UAAU,aAAaiC,IAAK,SAACF,GAAM,EAAKA,GAAGA,MAAhF,wC,GAzBiBX,IAAMC,WCsChBa,MAnCf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,IAAD,CAAQmC,SAAS,gBACf,4BAAQnC,UAAU,cACvB,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMoC,GAAG,KACP,yBAAKC,IAAKC,IAAMtC,UAAU,WAAWuC,IAAI,YAIxC,yBAAKvC,UAAU,eACpB,2BAAOA,UAAU,YACf,yBAAKA,UAAU,WACZ,kBAAC,IAAD,CAAMoC,GAAG,IAAIpC,UAAU,YAAvB,QACA,kBAAC,IAAD,CAAMoC,GAAG,gBAAgBpC,UAAU,YAAnC,mBAGL,0BAAMA,UAAU,YACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,iBACV,kBAAC,EAAD,MACA,kBAAC,EAAD,aC5BWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.41542ec7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nfunction Home() {\n  return (\n    <div className=\"Home\">\n      <p>This is our home, welcome and make it yours!</p>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport './FadingText.css';\n\nconst texts = [\n  \"Lorem\",\n  \"Ipsum\",\n  \"Dolor\",\n  \"Sit\",\n  \"Amet\"\n]\n\nclass FadingText extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      total: texts.length,\n      index: 0,\n      fading: false\n    }\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.changeText(),\n      4000\n    );\n  }\n\n  componentWillMount() {\n    clearInterval(this.timerID);\n  }\n\n  changeText() {\n    const current = {\n      total: this.state.total,\n      index: this.state.index,\n    }\n    \n    this.setState({\n\tfading: true\n    });\n \n    this.timer = setTimeout(_ => {\n      if(current.index < current.total - 1) {\n        this.setState({\n          index: current.index + 1,\n        });\n      } else {\n        this.setState({\n          index: 0,\n        });\n      }\n      this.setState({fading: false});\n    }, 500);\n\n  }\n  \n  render() {\n    const index = this.state.index;\n    const fading = this.state.fading;\n    let classChange = \"Part-inner\";\n\n    if(fading){\n\tclassChange = \"Part-inner faded\";\n    }\n\n    return (\n      <div className=\"FadingText\">\n        <p>This <span className=\"Part\"><span className={classChange}>{texts[index]}</span></span> will changing every 4 seconds.</p>\n      </div>\n    );\n  }\n}\n\nexport default FadingText;\n","import React from 'react';\nimport Typed from 'typed.js';\nimport './TypingText.js';\n\nconst texts = [\n  \"Lorem\",\n  \"Ipsum\",\n  \"Dolor\",\n  \"Sit\",\n  \"Amet\"\n]\n\nclass TypingText extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    }\n\n  componentDidMount() {\n    const options = {\n      strings: texts,\n      typeSpeed: 50,\n      backSpeed: 50,\n      loop: true,\n      backDelay: 4000\n    }\n\n    this.typed = new Typed(this.el, options);\n  }\n\n  componentWillUnmount() {\n    this.typed.destroy()\n  }\n\n  render() {\n    return (\n      <div className=\"TypingText\">\n        <p>This <span className=\"Part\"><span className=\"Part-inner\" ref={(el)=>{this.el=el;}}></span></span> will changing every 4 seconds.</p>\n      </div>\n    );\n  }\n}\n\nexport default TypingText;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\nimport './App.css';\n\nimport logo from './logo.svg';\n\nimport Home from './Home.js';\nimport FadingText from './FadingText.js';\nimport TypingText from './TypingText.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename='/reactestv2/'>\n        <header className=\"App-header\">\n\t  <div className=\"App-brand\">\n\t    <Link to=\"/\">\n\t      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t    </Link>\n\t  </div>\n        </header>\n        <div className=\"App-content\">\n\t  <aside className=\"App-side\">\n\t    <nav className=\"App-nav\">\n\t       <Link to=\"/\" className=\"App-link\">Home</Link>\n\t       <Link to=\"/changingtext\" className=\"App-link\">Changing Text</Link>\n\t    </nav>\n\t  </aside>\n\t  <main className=\"App-main\">\n\t    <Switch>\n\t      <Route exact path=\"/\">\n\t        <Home />\n\t      </Route>\n\t      <Route path=\"/changingtext\">\n\t        <FadingText />\n\t        <TypingText />\n\t      </Route>\n\t    </Switch>\n\t  </main>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}